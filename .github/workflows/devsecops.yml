name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  issues: write
  security-events: write

env:
  IMAGE_NAME: nikhileshsingh/automated-security-scanning-devsecops:latest
  DB_KEY: ${{ secrets.DB_KEY }}
  DB_URL: ${{ secrets.DB_URL }}

jobs:

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 🧾 Checkout Code
      uses: actions/checkout@v3

    - name: 🔍 Lint Dockerfile (Hadolint)
      uses: hadolint/hadolint-action@v2.0.0
      with:
        dockerfile: ./server/Dockerfile

    - name: 🔍 Lint JavaScript with ESLint
      uses: actions/setup-node@v3
      with:
        node-version: '24.0.2'
    - run: npm ci
      working-directory: ./server
    - run: npx eslint './**/*.js' --config eslint.config.js --format json --output-file eslint-report.json || true
      working-directory: ./server

    - name: 🔎 List JS Files for Debug
      run: find ./server -name "*.js"

    - name: Generate ESLint summary
      id: eslint-summary
      if: success() && hashFiles('server/eslint-report.json') != ''
      run: |
        jq -r '
          if length == 0 then
            "✅ No ESLint errors or warnings found."
          else
            ("⚠️ ESLint found " + (map(.messages | length) | add | tostring) + " issues.") 
          end
        ' server/eslint-report.json > server/eslint-summary.txt
      shell: bash

    - name: Fallback ESLint summary if no report
      if: hashFiles('server/eslint-report.json') == ''
      run: echo "⚠️ ESLint did not produce a report file. Check if JS files exist or ESLint ran correctly."

    - name: Comment ESLint results on PR
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ github.token }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### ESLint Results Summary
          ${{ steps.eslint-summary.outputs.comment }}

    - name: Upload ESLint Report Artifact
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: eslint-report.json

    - name: 🔐 Secret Scan with Gitleaks (exclude .vite)
      run: |
        curl -sSL https://github.com/zricethezav/gitleaks/releases/download/v8.12.0/gitleaks_8.12.0_linux_x64.tar.gz | tar -xz -C /tmp
        chmod +x /tmp/gitleaks
        /tmp/gitleaks detect \
          --config=.gitleaks.toml \
          --redact \
          --report-format sarif \
          --report-path gitleaks-results.sarif \
          --exit-code 0

    - name: 🔧 Remove duplicate rules from SARIF
      run: |
          python3 -c "
          import json
          with open('gitleaks-results.sarif', 'r') as f:
              sarif = json.load(f)
          rules = sarif['runs'][0]['tool']['driver']['rules']
          unique_rules = {r['id']: r for r in rules}.values()
          sarif['runs'][0]['tool']['driver']['rules'] = list(unique_rules)
          with open('gitleaks-results.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          "

    - name: Upload Gitleaks report
      uses: actions/upload-artifact@v4.6.2
      with:
        name: gitleaks-results
        path: gitleaks-results.sarif

    - name: Upload SARIF file to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3.28.18
      with:
        sarif_file: gitleaks-results.sarif
        token: ${{ github.token }}
        wait-for-processing: true

    - name: ⚙️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🐞 Debug Image Name
      run: |
        echo "IMAGE_NAME is: $IMAGE_NAME"
      env:
        IMAGE_NAME: ${{ env.IMAGE_NAME }}

    - name: 🔍 Debug Context
      run: |
        ls -la
        ls -la ./server

    - name: 🧹 Remove Docker cache
      run: docker builder prune -af

    - name: 🛠️ Build Docker Image for Local Scan
      run: docker buildx build --load -t $IMAGE_NAME ./server

    - name: 🧽 Dockerfile Best Practices with Dockle
      run: |
        docker pull goodwithtech/dockle
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          goodwithtech/dockle \
          --exit-code 1 \
          --exit-level FATAL \
          "$IMAGE_NAME"

    - name: 🔐 Log in to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: 📦 Push Docker Image to Docker Hub
      run: docker push "$IMAGE_NAME"

    - name: 🔍 Vulnerability Scan with Trivy
      uses: aquasecurity/trivy-action@0.30.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  build:
    name: 🛠️ Build & Test Docker Images
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Inject Environment Variables
      run: |
        echo "DB_KEY=${{ env.DB_KEY }}" >> server/.env
        echo "DB_URL=${{ env.DB_URL }}" >> server/.env

    - name: Build Docker Images
      run: docker compose -f ./docker-compose.yml build

  dockerhub-push:
    name: 📦 Push to DockerHub
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build & Push Image
      run: |
        TAG=$(git rev-parse --short HEAD)
    
        # Strip the tag from the image name
        IMAGE_BASE="${IMAGE_NAME%:*}"

        docker build \
          --build-arg DB_KEY=${{ secrets.DB_KEY }} \
          --build-arg DB_URL=${{ secrets.DB_URL }} \
          -t "$IMAGE_BASE:latest" \
          -t "$IMAGE_BASE:$TAG" ./server

        docker push "$IMAGE_BASE:latest"
        docker push "$IMAGE_BASE:$TAG"

  zap-scan:
    name: 🔥 OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    needs: dockerhub-push

    permissions:
      contents: write
      issues: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: ⚙️ Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: 🚀 Start Frontend Container
      run: docker compose up -d client

    - name: 🕒 Wait for Frontend to Be Ready
      run: |
        for i in {1..10}; do
          if curl -s http://localhost:8080 > /dev/null; then
            echo "Frontend is up!"
            exit 0
          fi
          echo "Waiting for frontend..."
          sleep 5
        done
        echo "Frontend did not start in time." >&2
        exit 1

    - name: Set permissions for ZAP workspace # NEW STEP ADDED HERE
      run: |
        # Grant full permissions to the GitHub Actions workspace directory
        # This resolves 'Permission denied: /zap/wrk/zap.yaml'
        chmod -R 777 ${{ github.workspace }}

    - name: 🔥 Run ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: 'http://localhost:8080'
        fail_action: false
        allow_issue_writing: true
        artifact_name: vuln-scan-results
        issue_title: ZAP Scan Baseline Report
        docker_name: ghcr.io/zaproxy/zaproxy:stable
        token: ${{ github.token }} # ADDED THIS LINE - CRITICAL for issue creation and artifact upload from the ZAP action itself

    - name: 📦 Upload ZAP Reports
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: |
          report_json.json
          report_md.md
          report_html.html

  slack-alert:
    name: 🔔 Slack Alert on Failure
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Notify Slack
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"🚨 CI/CD Pipeline failed for CourseSellingWebsite!"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
