name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  issues: write
  security-events: write

env:
  IMAGE_NAME: nikhileshsingh/automated-security-scanning-devsecops:latest
  DB_KEY: ${{ secrets.DB_KEY }}
  DB_URL: ${{ secrets.DB_URL }}

jobs:

  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true

    steps:
    - name: üßæ Checkout Code
      uses: actions/checkout@v3

    - name: ‚öôÔ∏è Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '24.0.2'

    - name: Install root npm dependencies (for ESLint and its config)
      # This runs in the repository root and installs devDependencies from root package.json
      run: npm ci

    - name: Install server npm dependencies
      # This installs dependencies specifically for the ./server application
      run: npm ci
      working-directory: ./server

    - name: üîç Lint Dockerfile (Hadolint)
      uses: hadolint/hadolint-action@v2.0.0
      with:
        dockerfile: ./server/Dockerfile

    - name: Run ESLint and capture output
      run: |
        # Re-enabling verbose debugging to catch critical failures
        set -euxo pipefail

        # Use 'json' format, which is supported by ESLint v9 without separate installation.
        # Output to 'eslint-report.json' as originally intended.
        npx eslint './server/**/*.js' --config ./eslint.config.js --format json --output-file eslint-report.json
        ESLINT_EXIT_CODE=$?
        echo "ESLint command finished with exit code: $ESLINT_EXIT_CODE"
        exit 0 # Ensure the step doesn't fail the job even if ESLint finds issues
      # No 'working-directory' is set for this step, so it runs from the repo root

    - name: üîé Debug ESLint Report File Presence and Content
      run: |
        echo "--- Listing contents of root directory: ---"
        ls -la ./
        echo "----------------------------------------------"

        echo "--- Checking for eslint-report.json: ---"
        if [ -f "./eslint-report.json" ]; # File is now expected in root
        then
          echo "‚úÖ eslint-report.json FOUND at ./eslint-report.json!"
          echo "File size:"
          wc -c ./eslint-report.json
          echo "First 20 lines of eslint-report.json (if file is not binary):"
          head -n 20 ./eslint-report.json || echo "Could not display content (file might be empty or too large)."
          if [ "$(jq length < ./eslint-report.json)" -eq 0 ]; then
            echo "Note: eslint-report.json is an empty JSON array []."
          fi
        else
          echo "‚ùå eslint-report.json NOT FOUND in root."
          echo "Possible reasons: ESLint command failed, no JS files matched, or output path is incorrect."
        fi
        echo "----------------------------------------------"

    - name: Generate ESLint summary
      id: eslint-summary
      if: success() && hashFiles('eslint-report.json') != '' # Path adjusted to root
      run: |
        jq -r '
          if length == 0 then
            "‚úÖ No ESLint errors or warnings found."
          else
            ("‚ö†Ô∏è ESLint found " + (map(.messages | length) | add | tostring) + " issues.")
          end
        ' eslint-report.json > eslint-summary.txt # Path adjusted to root
      shell: bash

    - name: Fallback ESLint summary if no report
      if: hashFiles('eslint-report.json') == '' # Path adjusted to root
      run: echo "‚ö†Ô∏è ESLint did not produce a report file. Check if JS files exist or ESLint ran correctly."

    - name: Comment ESLint results on PR
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ github.token }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### ESLint Results Summary
          ${{ steps.eslint-summary.outputs.comment }}

    - name: Upload ESLint Report Artifact
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: eslint-report.json # Path adjusted to root

    - name: üîê Secret Scan with Gitleaks (exclude .vite)
      run: |
        curl -sSL https://github.com/zricethezav/gitleaks/releases/download/v8.12.0/gitleaks_8.12.0_linux_x64.tar.gz | tar -xz -C /tmp
        chmod +x /tmp/gitleaks
        /tmp/gitleaks detect \
          --config=.gitleaks.toml \
          --redact \
          --report-format sarif \
          --report-path gitleaks-results.sarif \
          --exit-code 0

    - name: üîß Remove duplicate rules from SARIF
      run: |
          python3 -c "
          import json
          with open('gitleaks-results.sarif', 'r') as f:
              sarif = json.load(f)
          rules = sarif['runs'][0]['tool']['driver']['rules']
          unique_rules = {r['id']: r for r in rules}.values()
          sarif['runs'][0]['tool']['driver']['rules'] = list(unique_rules)
          with open('gitleaks-results.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          "

    - name: Upload Gitleaks report
      uses: actions/upload-artifact@v4.6.2
      with:
        name: gitleaks-results
        path: gitleaks-results.sarif

    - name: Upload SARIF file to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3.28.18
      with:
        sarif_file: gitleaks-results.sarif
        token: ${{ github.token }}
        wait-for-processing: true

    - name: ‚öôÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üêû Debug Image Name
      run: |
        echo "IMAGE_NAME is: $IMAGE_NAME"
      env:
        IMAGE_NAME: ${{ env.IMAGE_NAME }}

    - name: üîç Debug Context
      run: |
        ls -la
        ls -la ./server

    - name: üßπ Remove Docker cache
      run: docker builder prune -af

    - name: üõ†Ô∏è Build Docker Image for Local Scan
      run: docker buildx build --load -t $IMAGE_NAME ./server

    - name: üßΩ Dockerfile Best Practices with Dockle
      run: |
        docker pull goodwithtech/dockle
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          goodwithtech/dockle \
          --exit-code 1 \
          --exit-level FATAL \
          "$IMAGE_NAME"

    - name: üîê Log in to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: üì¶ Push Docker Image to Docker Hub
      run: docker push "$IMAGE_NAME"

    - name: üîç Vulnerability Scan with Trivy
      uses: aquasecurity/trivy-action@0.30.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  build:
    name: üõ†Ô∏è Build & Test Docker Images
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Inject Environment Variables
      run: |
        echo "DB_KEY=${{ env.DB_KEY }}" >> server/.env
        echo "DB_URL=${{ env.DB_URL }}" >> server/.env

    - name: Build Docker Images
      run: docker compose -f ./docker-compose.yml build

  dockerhub-push:
    name: üì¶ Push to DockerHub
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build & Push Image
      run: |
        TAG=$(git rev-parse --short HEAD)
    
        # Strip the tag from the image name
        IMAGE_BASE="${IMAGE_NAME%:*}"

        docker build \
          --build-arg DB_KEY=${{ secrets.DB_KEY }} \
          --build-arg DB_URL=${{ secrets.DB_URL }} \
          -t "$IMAGE_BASE:latest" \
          -t "$IMAGE_BASE:$TAG" ./server

        docker push "$IMAGE_BASE:latest"
        docker push "$IMAGE_BASE:$TAG"

  zap-scan:
    name: üî• OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    needs: dockerhub-push

    permissions:
      contents: write
      issues: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: ‚öôÔ∏è Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: üöÄ Start Frontend Container
      run: docker compose up -d client

    - name: üïí Wait for Frontend to Be Ready
      run: |
        for i in {1..10}; do
          if curl -s http://localhost:8080 > /dev/null; then
            echo "Frontend is up!"
            exit 0
          fi
          echo "Waiting for frontend..."
          sleep 5
        done
        echo "Frontend did not start in time." >&2
        exit 1

    - name: Set permissions for ZAP workspace # NEW STEP ADDED HERE
      run: |
        # Grant full permissions to the GitHub Actions workspace directory
        # This resolves 'Permission denied: /zap/wrk/zap.yaml'
        chmod -R 777 ${{ github.workspace }}

    - name: üî• Run ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: 'http://localhost:8080'
        fail_action: false
        allow_issue_writing: true
        artifact_name: "zapreport"
        issue_title: ZAP Scan Baseline Report
        docker_name: ghcr.io/zaproxy/zaproxy:stable
        token: ${{ github.token }} # ADDED THIS LINE - CRITICAL for issue creation and artifact upload from the ZAP action itself
      continue-on-error: true

    - name: üì¶ Upload ZAP Reports
      uses: actions/upload-artifact@v4
      with:
        name: zap-raw-reports
        path: |
          report_json.json
          report_md.md
          report_html.html

  slack-alert:
    name: üîî Slack Alert on Failure/Warnings
    runs-on: ubuntu-latest
    if: always() # Ensure this job always runs
    needs: [security-scan, zap-scan] # Depends on these jobs to get their results and artifacts

    steps:
    - name: Get security-scan job status
      id: security_status
      run: echo "security_scan_conclusion=${{ needs.security-scan.result }}" >> "$GITHUB_OUTPUT"

    - name: Get zap-scan job status
      id: zap_status
      run: echo "zap_scan_conclusion=${{ needs.zap-scan.result }}" >> "$GITHUB_OUTPUT"

    - name: Download ESLint Report Artifact
      uses: actions/download-artifact@v4
      with:
        name: eslint-report
        path: ./eslint-reports # Download to a specific directory
      continue-on-error: true # Don't fail if artifact isn't found (e.g., no JS files, or previous step failed)

    - name: Download ZAP Reports Artifact
      uses: actions/download-artifact@v4
      with:
        name: zap-raw-reports
        path: ./zap-reports # Download to a specific directory
      continue-on-error: true # Don't fail if artifact isn't found

    - name: Process ESLint and ZAP Reports
      id: report_summary
      run: |
        ESLINT_SUMMARY=""
        ZAP_SUMMARY=""
        HAS_REPORT_ISSUES="false" # Flag to track if any issues were found in reports

        # --- Process ESLint Report ---
        if [ -f "./eslint-reports/eslint-report.json" ]; then
          ESLINT_ISSUES=$(jq '[.[] | .messages | length] | add' ./eslint-reports/eslint-report.json)
          if [ "$ESLINT_ISSUES" -gt 0 ]; then
            ESLINT_SUMMARY=":warning: *ESLint Issues:* $ESLINT_ISSUES found.\n"
            HAS_REPORT_ISSUES="true"
          else
            ESLINT_SUMMARY=":white_check_mark: *ESLint Issues:* None found.\n"
          fi
        else
          ESLINT_SUMMARY=":warning: *ESLint Issues:* Report not found (possibly no JS files, or ESLint step issues).\n"
        fi

        # --- Process ZAP Report ---
        # Note: ZAP riskcode: 3=High, 2=Medium, 1=Low, 0=Info
        if [ -f "./zap-reports/report_json.json" ]; then
          HIGH_ALERTS=$(jq '[.site[]?.alerts[]? | select(.riskcode == 3)] | length' ./zap-reports/report_json.json)
          MEDIUM_ALERTS=$(jq '[.site[]?.alerts[]? | select(.riskcode == 2)] | length' ./zap-reports/report_json.json)
          LOW_ALERTS=$(jq '[.site[]?.alerts[]? | select(.riskcode == 1)] | length' ./zap-reports/report_json.json)
          INFO_ALERTS=$(jq '[.site[]?.alerts[]? | select(.riskcode == 0)] | length' ./zap-reports/report_json.json)
          TOTAL_ALERTS=$((HIGH_ALERTS + MEDIUM_ALERTS + LOW_ALERTS + INFO_ALERTS))

          if [ "$TOTAL_ALERTS" -gt 0 ]; then
            ZAP_SUMMARY=":red_circle: *ZAP Scan Vulnerabilities:*\n"
            if [ "$HIGH_ALERTS" -gt 0 ]; then ZAP_SUMMARY+="  - High: $HIGH_ALERTS\n"; HAS_REPORT_ISSUES="true"; fi
            if [ "$MEDIUM_ALERTS" -gt 0 ]; then ZAP_SUMMARY+="  - Medium: $MEDIUM_ALERTS\n"; HAS_REPORT_ISSUES="true"; fi
            if [ "$LOW_ALERTS" -gt 0 ]; then ZAP_SUMMARY+="  - Low: $LOW_ALERTS\n"; HAS_REPORT_ISSUES="true"; fi
            if [ "$INFO_ALERTS" -gt 0 ]; then ZAP_SUMMARY+="  - Info: $INFO_ALERTS\n"; fi
          else
            ZAP_SUMMARY=":white_check_mark: *ZAP Scan Vulnerabilities:* None found.\n"
          fi
        else
          ZAP_SUMMARY=":warning: *ZAP Scan Vulnerabilities:* Report not found.\n"
        fi

        # Set outputs for next step
        echo "ESLINT_SUMMARY<<EOF" >> "$GITHUB_OUTPUT"
        echo "$ESLINT_SUMMARY" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        echo "ZAP_SUMMARY<<EOF" >> "$GITHUB_OUTPUT"
        echo "$ZAP_SUMMARY" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        echo "HAS_REPORT_ISSUES=$HAS_REPORT_ISSUES" >> "$GITHUB_OUTPUT"


    - name: Notify Slack
      # Trigger if any job failed OR if ESLint/ZAP reports show issues
      if: |
        ${{ steps.security_status.outputs.security_scan_conclusion != 'success' ||
            steps.zap_status.outputs.zap_scan_conclusion != 'success' ||
            steps.report_summary.outputs.HAS_REPORT_ISSUES == 'true' }}
      run: |
        ALERT_HEADER=""
        # Determine the overall alert header based on job conclusions and report issues
        if [ "${{ steps.security_status.outputs.security_scan_conclusion }}" != "success" ] || \
           [ "${{ steps.zap_status.outputs.zap_scan_conclusion }}" != "success" ]; then
          ALERT_HEADER=":rotating_light: *CI/CD Pipeline Failure/Error Detected!* :rotating_light:\n"
        elif [ "${{ steps.report_summary.outputs.HAS_REPORT_ISSUES }}" == "true" ]; then
          ALERT_HEADER=":warning: *CI/CD Pipeline Completed with Warnings/Vulnerabilities!* :warning:\n"
        else
          # This branch should theoretically not be hit due to the 'if' condition,
          # but included for completeness if the condition logic changes.
          ALERT_HEADER=":white_check_mark: *CI/CD Pipeline Completed Successfully!* :white_check_mark:\n"
        fi

        ALERT_MESSAGE="${ALERT_HEADER}\n"
        ALERT_MESSAGE+="*Job Statuses:*\n"
        ALERT_MESSAGE+="  - Security Scan: ${{ steps.security_status.outputs.security_scan_conclusion }}\n"
        ALERT_MESSAGE+="  - ZAP Scan: ${{ steps.zap_status.outputs.zap_scan_conclusion }}\n\n"
        ALERT_MESSAGE+="${{ steps.report_summary.outputs.ESLINT_SUMMARY }}"
        ALERT_MESSAGE+="${{ steps.report_summary.outputs.ZAP_SUMMARY }}\n"
        ALERT_MESSAGE+="*Workflow Run:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$ALERT_MESSAGE\"}" \
        ${{ secrets.SLACK_WEBHOOK_URL }}
